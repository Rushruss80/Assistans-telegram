import asyncio
import os
import re
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º
TOKEN = os.environ.get("BOT_TOKEN", "")  # –ë–∞–∂–∞–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–æ–∫–µ–Ω —É –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if not TOKEN:
    raise RuntimeError("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á
TASKS_FILE = "tasks.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–¥–∞—á –∑ —Ñ–∞–π–ª—É (—è–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫—É)
tasks_data = {"tasks": []}
if os.path.exists(TASKS_FILE):
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            tasks_data = json.load(f)
    except json.JSONDecodeError:
        tasks_data = {"tasks": []}

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á —É —Ñ–∞–π–ª
def save_tasks():
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks_data, f, ensure_ascii=False, indent=4)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —è–∫–µ –æ—á—ñ–∫—É—î –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (key: user_id)
pending_reminders = {}

# –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è –ø–æ—à—É–∫—É —á–∞—Å—É –≤ —Ç–µ–∫—Å—Ç—ñ
time_pattern = re.compile(r"(\d{1,2}:\d{2})")            # —à—É–∫–∞—î –ø—ñ–¥—Ä—è–¥–æ–∫ —è–∫ HH:MM
relative_pattern = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–≥–æ–¥|—Ö–≤)", flags=re.IGNORECASE)  # —à—É–∫–∞—î "—á–µ—Ä–µ–∑ X –≥–æ–¥/—Ö–≤"

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á ü§ñ\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–¥–∞—á–µ—é —ñ —á–∞—Å–æ–º, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏.\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "‚Ä¢ `–ù–∞–≥–∞–¥–∞–π –º–µ–Ω—ñ –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á –æ 19:30`\n"
        "‚Ä¢ `–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä—É –≤ 11:00`\n"
        "‚Ä¢ `–ø–æ–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏`\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —è –∑–∞–ø–∏—Ç–∞—é, –∫–æ–ª–∏ —Å–∞–º–µ –Ω–∞–≥–∞–¥–∞—Ç–∏ ‚Äì –≤ —Ç–æ—á–Ω–æ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å —á–∏ —â–µ –π –∑–∞ 10 —ñ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ–¥—ñ—ó."
    )

@dp.message_handler(lambda msg: time_pattern.search(msg.text) or relative_pattern.search(msg.text))
async def handle_reminder_request(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –º—ñ—Å—Ç—è—Ç—å —á–∞—Å–æ–≤–∏–π –≤–∏—Ä–∞–∑ (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)."""
    text = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å HH:MM –∞–±–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —á–∞—Å "—á–µ—Ä–µ–∑ N ..."
    abs_time_match = time_pattern.search(text)
    rel_time_match = relative_pattern.search(text)

    event_time = None
    desc = text  # –ø–æ—á–∞—Ç–∫–æ–≤–æ –æ–ø–∏—Å ‚Äì —É–≤–µ—Å—å —Ç–µ–∫—Å—Ç, –ø–æ—Ç—ñ–º –±—É–¥–µ–º–æ –æ—á–∏—â–∞—Ç–∏

    if abs_time_match:
        # –í–∏—Ç—è–≥–Ω—É—Ç–æ —Ñ–æ—Ä–º–∞—Ç HH:MM
        time_str = abs_time_match.group(1)  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "15:30"
        # –û–ø–∏—Å –∑–∞–¥–∞—á—ñ ‚Äì –≤—Å–µ, —â–æ –ø–µ—Ä–µ–¥—É—î —á–∞—Å—É –≤ —Ç–µ–∫—Å—Ç—ñ
        desc = text[:abs_time_match.start()]
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–ø–æ–≤—ñ —Å–ª–æ–≤–∞-–∑–∞–π–≤—ñ —Ñ—Ä–∞–∑–∏ –∑ –æ–ø–∏—Å—É
        desc = re.sub(r"(?i)\b–Ω–∞–≥–∞–¥–∞–π( –º–µ–Ω—ñ)?\b", "", desc)  # –ø—Ä–∏–±—Ä–∞—Ç–∏ "–ù–∞–≥–∞–¥–∞–π" –∞–±–æ "–ù–∞–≥–∞–¥–∞–π –º–µ–Ω—ñ"
        desc = re.sub(r"(?i)\b–ø—Ä–æ\b", "", desc)              # –ø—Ä–∏–±—Ä–∞—Ç–∏ —Å–ª–æ–≤–æ "–ø—Ä–æ" (—è–∫—â–æ –±—É–ª–æ "–Ω–∞–≥–∞–¥–∞–π –ø—Ä–æ X")
        desc = desc.strip(" ,.-:")  # –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏ –∑ –∫—Ä–∞—ó–≤
        # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å
        try:
            hour, minute = map(int, time_str.split(":"))
        except ValueError:
            await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM.")
            return
        now = datetime.now()
        event_time = datetime(now.year, now.month, now.day, hour, minute)
        # –Ø–∫—â–æ —á–∞—Å —É–∂–µ –º–∏–Ω—É–≤ —Å—å–æ–≥–æ–¥–Ω—ñ, –¥–æ–¥–∞–º–æ 1 –¥–µ–Ω—å (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
        if event_time < now:
            event_time = event_time + timedelta(days=1)
    elif rel_time_match:
        # –í–∏—Ç—è–≥–Ω—É—Ç–æ —Ñ–æ—Ä–º–∞—Ç "—á–µ—Ä–µ–∑ N ... (–≥–æ–¥/—Ö–≤)"
        number = int(rel_time_match.group(1))
        unit = rel_time_match.group(2).lower()  # "–≥–æ–¥" –∞–±–æ "—Ö–≤"
        desc = text[:rel_time_match.start()]
        desc = re.sub(r"(?i)\b–Ω–∞–≥–∞–¥–∞–π( –º–µ–Ω—ñ)?\b", "", desc)
        desc = re.sub(r"(?i)\b–ø—Ä–æ\b", "", desc)
        desc = desc.strip(" ,.-:")
        now = datetime.now()
        if unit.startswith("–≥–æ–¥"):
            event_time = now + timedelta(hours=number)
        else:
            event_time = now + timedelta(minutes=number)
    else:
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —á–∞—Å—É (—Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ —Ü–µ–π handler —Ç–æ–¥—ñ –Ω–µ –º–∞–≤ –±–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—å)
        return

    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –æ–ø–∏—Å –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äì –∑–∞–¥–∞—Ç–∏ —É–º–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
    if not desc:
        desc = "–ø–æ–¥—ñ—é"

    # –ó–±–µ—Ä–µ–∂–µ–º–æ –¥–∞–Ω—ñ —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –æ–ø—Ü—ñ—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    pending_reminders[user_id] = {"chat_id": chat_id, "text": desc, "time": event_time}
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–≤–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîî –¢—ñ–ª—å–∫–∏ –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å", callback_data="remind_once"))
    keyboard.add(types.InlineKeyboardButton("‚è∞ –ó–∞ 10 —Ö–≤, 5 —Ö–≤ —ñ –≤ —á–∞—Å –ø–æ–¥—ñ—ó", callback_data="remind_multiple"))
    await message.reply(
        f"üìù –Ø –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ –∑–∞–¥–∞—á—É: **{desc}** –æ {event_time.strftime('%H:%M')}. –ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –Ω–µ—ó?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda call: call.data in ("remind_once", "remind_multiple"))
async def process_reminder_choice(call: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –≤ —á–∞—Å –ø–æ–¥—ñ—ó –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ –ø–æ–¥—ñ—ó)."""
    user_id = call.from_user.id
    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –æ—á—ñ–∫—É—é—á–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    data = pending_reminders.get(user_id)
    if not data:
        await call.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", show_alert=True)
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –∑ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞, –±–æ –ø–æ—á–∏–Ω–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    pending_reminders.pop(user_id, None)

    chat_id = data["chat_id"]
    desc = data["text"]
    event_time: datetime = data["time"]
    choice = call.data

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å (—á–∞—Å–∏ —Ç–∞ —Ç–µ–∫—Å—Ç–∏)
    reminders_to_schedule = []

    # –û—Å–Ω–æ–≤–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤ —á–∞—Å –ø–æ–¥—ñ—ó
    reminders_to_schedule.append((event_time, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: **{desc}** –≤–∂–µ –∑–∞—Ä–∞–∑!"))

    if choice == "remind_multiple":
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 10 —Ö–≤ —ñ 5 —Ö–≤ –¥–æ –ø–æ–¥—ñ—ó
        remind_10 = event_time - timedelta(minutes=10)
        remind_5 = event_time - timedelta(minutes=5)
        now = datetime.now()
        if remind_10 > now:
            reminders_to_schedule.append((remind_10, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: **{desc}** —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω"))
        if remind_5 > now:
            reminders_to_schedule.append((remind_5, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: **{desc}** —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω"))

    # –ó–∞–ø–ª–∞–Ω—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    for remind_time, text in reminders_to_schedule:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–¥–∞—á—É —É —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        task_entry = {
            "chat_id": chat_id,
            "text": text,
            "time": remind_time.isoformat()
        }
        tasks_data["tasks"].append(task_entry)
        # –°—Ç–∞—Ä—Ç—É—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        asyncio.create_task(send_reminder(chat_id, text, remind_time))

    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É —Ñ–∞–π–ª
    save_tasks()

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —Å–ø–æ–≤—ñ—â–∞—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await call.answer("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!", show_alert=False)
    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await call.message.edit_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

async def send_reminder(chat_id: int, text: str, remind_time: datetime):
    """–í—ñ–¥–∫–ª–∞–¥–µ–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É –∑–∞–¥–∞–Ω–∏–π —á–∞—Å."""
    # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–æ –º–æ–º–µ–Ω—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    delay = (remind_time - datetime.now()).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
    try:
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.send_message(chat_id, text, parse_mode="Markdown")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É –∑—ñ —Å–ø–∏—Å–∫—É —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª
    tasks_data["tasks"] = [t for t in tasks_data["tasks"] if not (
        t.get("chat_id") == chat_id and t.get("text") == text and t.get("time") == remind_time.isoformat()
    )]
    save_tasks()

# –ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: –ø–ª–∞–Ω—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
async def on_startup(_):
    now = datetime.now()
    new_task_list = []
    for task in tasks_data.get("tasks", []):
        try:
            task_time = datetime.fromisoformat(task["time"])
        except Exception:
            continue
        # –Ø–∫—â–æ —á–∞—Å —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤, –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        if task_time > now:
            new_task_list.append(task)
            asyncio.create_task(send_reminder(task["chat_id"], task["text"], task_time))
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–≤—à–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ñ, —è–∫—â–æ –±—É–ª–∏) —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    tasks_data["tasks"] = new_task_list
    save_tasks()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á:", len(new_task_list))

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup)

