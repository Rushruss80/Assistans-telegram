import asyncio
import os
import re
import json
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = os.environ.get("BOT_TOKEN", "")
if not TOKEN:
    raise RuntimeError("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN")
bot = AsyncTeleBot(TOKEN)

TASKS_FILE = "tasks.json"
KYIV = ZoneInfo("Europe/Kyiv")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–¥–∞—á
tasks_data = {"tasks": []}
if os.path.exists(TASKS_FILE):
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            tasks_data = json.load(f)
    except json.JSONDecodeError:
        tasks_data = {"tasks": []}

def save_tasks():
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks_data, f, ensure_ascii=False, indent=4)

pending_reminders = {}
time_pattern = re.compile(r"(\d{1,2}:\d{2})")
relative_pattern = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–≥–æ–¥|—Ö–≤)", flags=re.IGNORECASE)

@bot.message_handler(commands=["start", "help"])
async def send_welcome(message):
    await bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥–∞–¥—É–≤–∞—á ü§ñ\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–¥–∞—á–µ—é —ñ —á–∞—Å–æ–º, –∫–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏.\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "‚Ä¢ `–ù–∞–≥–∞–¥–∞–π –º–µ–Ω—ñ –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á –æ 19:30`\n"
        "‚Ä¢ `–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä—É –≤ 11:00`\n"
        "‚Ä¢ `–ø–æ–ª–∏—Ç–∏ –∫–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏`"
    )

@bot.message_handler(func=lambda msg: time_pattern.search(msg.text) or relative_pattern.search(msg.text))
async def handle_reminder_request(message):
    text = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id

    abs_time_match = time_pattern.search(text)
    rel_time_match = relative_pattern.search(text)
    event_time = None
    desc = text

    if abs_time_match:
        time_str = abs_time_match.group(1)
        desc = text[:abs_time_match.start()]
        desc = re.sub(r"(?i)\b–Ω–∞–≥–∞–¥–∞–π( –º–µ–Ω—ñ)?\b", "", desc)
        desc = re.sub(r"(?i)\b–ø—Ä–æ\b", "", desc).strip(" ,.-:")
        try:
            hour, minute = map(int, time_str.split(":"))
        except ValueError:
            await bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM.")
            return
        now = datetime.now(KYIV)
        event_time = datetime(now.year, now.month, now.day, hour, minute, tzinfo=KYIV)
        if event_time < now:
            event_time += timedelta(days=1)
    elif rel_time_match:
        number = int(rel_time_match.group(1))
        unit = rel_time_match.group(2).lower()
        desc = text[:rel_time_match.start()]
        desc = re.sub(r"(?i)\b–Ω–∞–≥–∞–¥–∞–π( –º–µ–Ω—ñ)?\b", "", desc)
        desc = re.sub(r"(?i)\b–ø—Ä–æ\b", "", desc).strip(" ,.-:")
        now = datetime.now(KYIV)
        if unit.startswith("–≥–æ–¥"):
            event_time = now + timedelta(hours=number)
        else:
            event_time = now + timedelta(minutes=number)
    else:
        return

    if not desc:
        desc = "–ø–æ–¥—ñ—é"

    pending_reminders[user_id] = {"chat_id": chat_id, "text": desc, "time": event_time}
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîî –¢—ñ–ª—å–∫–∏ –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å", callback_data="remind_once"))
    keyboard.add(InlineKeyboardButton("‚è∞ –ó–∞ 10 —Ö–≤, 5 —Ö–≤ —ñ –≤ —á–∞—Å –ø–æ–¥—ñ—ó", callback_data="remind_multiple"))
    await bot.send_message(
        chat_id,
        f"üìù –Ø –∑–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ –∑–∞–¥–∞—á—É: **{desc}** –æ {event_time.strftime('%H:%M')}. –ö–æ–ª–∏ –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –Ω–µ—ó?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data in ("remind_once", "remind_multiple"))
async def process_reminder_choice(call: CallbackQuery):
    user_id = call.from_user.id
    data = pending_reminders.pop(user_id, None)
    if not data:
        await bot.answer_callback_query(call.id, "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞–¥–∞—á—ñ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", show_alert=True)
        return

    chat_id = data["chat_id"]
    desc = data["text"]
    event_time = data["time"]
    choice = call.data

    reminders_to_schedule = [(event_time, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: **{desc}** –≤–∂–µ –∑–∞—Ä–∞–∑!")]

    now = datetime.now(KYIV)
    if choice == "remind_multiple":
        for minutes, label in [(10, "—á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω"), (5, "—á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω")]:
            remind_time = event_time - timedelta(minutes=minutes)
            if remind_time > now:
                reminders_to_schedule.append((remind_time, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: **{desc}** {label}"))

    for remind_time, text in reminders_to_schedule:
        task_entry = {
            "chat_id": chat_id,
            "text": text,
            "time": remind_time.isoformat()
        }
        tasks_data["tasks"].append(task_entry)
        asyncio.create_task(send_reminder(chat_id, text, remind_time))

    save_tasks()
    await bot.answer_callback_query(call.id, "‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!", show_alert=False)
    await bot.edit_message_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.", chat_id, call.message.message_id)

async def send_reminder(chat_id: int, text: str, remind_time: datetime):
    delay = (remind_time - datetime.now(KYIV)).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
    try:
        await bot.send_message(chat_id, text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
    tasks_data["tasks"] = [t for t in tasks_data["tasks"] if not (
        t.get("chat_id") == chat_id and t.get("text") == text and t.get("time") == remind_time.isoformat()
    )]
    save_tasks()

async def on_startup():
    now = datetime.now(KYIV)
    new_task_list = []
    for task in tasks_data.get("tasks", []):
        try:
            task_time = datetime.fromisoformat(task["time"]).astimezone(KYIV)
        except Exception:
            continue
        if task_time > now:
            new_task_list.append(task)
            asyncio.create_task(send_reminder(task["chat_id"], task["text"], task_time))
    tasks_data["tasks"] = new_task_list
    save_tasks()
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(new_task_list)}")

if __name__ == "__main__":
    asyncio.run(on_startup())
    bot.infinity_polling()


    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(new_task_list)}")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
