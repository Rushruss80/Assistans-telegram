import telebot
import asyncio
import re
from datetime import datetime
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
if BOT_TOKEN is None:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")

bot = telebot.TeleBot(BOT_TOKEN)

# ---- –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É ----
def parse_time(message: str):
    moment_pattern = r"(?:–æ|–≤)\s?(\d{1,2}:\d{2})"
    interval_pattern = r"(?:–∑)\s?(\d{1,2}:\d{2})\s?(?:–¥–æ)\s?(\d{1,2}:\d{2})"

    now = datetime.now()

    interval_match = re.search(interval_pattern, message)
    if interval_match:
        start_str, end_str = interval_match.groups()
        start = datetime.strptime(start_str, "%H:%M").replace(
            year=now.year, month=now.month, day=now.day)
        end = datetime.strptime(end_str, "%H:%M").replace(
            year=now.year, month=now.month, day=now.day)
        return ("interval", start, end)

    moment_match = re.search(moment_pattern, message)
    if moment_match:
        time_str = moment_match.group(1)
        scheduled = datetime.strptime(time_str, "%H:%M").replace(
            year=now.year, month=now.month, day=now.day)
        return ("moment", scheduled)

    return None

# ---- –ó–∞–ø—É—Å–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ----
async def schedule_reminder(chat_id, task_text, scheduled_time):
    now = datetime.now()
    delay = (scheduled_time - now).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
        bot.send_message(chat_id, f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task_text}")
    else:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_text} –≤–∂–µ –≤ –º–∏–Ω—É–ª–æ–º—É")

# ---- –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ----
@bot.message_handler(func=lambda msg: True)
def handle_task(message):
    text = message.text
    parsed = parse_time(text)

    if parsed:
        if parsed[0] == "moment":
            scheduled_time = parsed[1]
            asyncio.create_task(schedule_reminder(message.chat.id, text, scheduled_time))
            bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%H:%M')}")
        else:
            bot.send_message(message.chat.id, "üîÅ –ü—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É —â–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –∞–ª–µ –±—É–¥–µ üòâ")
    else:
        bot.send_message(message.chat.id, "üìù –ó–∞–¥–∞—á–∞ –ø—Ä–∏–π–Ω—è—Ç–∞, –∞–ª–µ –±–µ–∑ —á–∞—Å—É")

# ---- –ó–∞–ø—É—Å–∫ ----
import threading

def run_bot():
    bot.infinity_polling()

threading.Thread(target=run_bot).start()
